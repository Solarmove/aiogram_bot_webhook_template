services:
  promtail:
    image: grafana/promtail:latest
    container_name: promtail
    ports:
      - "9080:9080"
    volumes:
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
      - ./promtail-config.yaml:/etc/promtail/config.yml
    command: -config.file=/etc/promtail/config.yml
    privileged: true
    networks:
      - bot-network

  loki:
    image: grafana/loki:latest
    container_name: loki
    ports:
      - "3100:3100"
    volumes:
      - ./loki-config.yaml:/etc/loki/local-config.yaml
    networks:
      - bot-network

  bot:
    build: .
    container_name: bot
    env_file: .env
    environment:
      - PYTHONUNBUFFERED=1  # Для мгновенного вывода логов
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - bot-network
    ports:
      - "8000:8000"
    restart: on-failure
    logging:
      driver: json-file
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"

  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: ${DB_CONFIG__USER}
      POSTGRES_PASSWORD: ${DB_CONFIG__PASSWORD}
      POSTGRES_DB: ${DB_CONFIG__DATABASE}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DB_CONFIG__USER} -d ${DB_CONFIG__DATABASE}" ]
      interval: 5s
      timeout: 5s
      retries: 5
    ports:
      - "${DB_CONFIG__PORT}:5432"
    networks:
      - bot-network
    restart: on-failure

  redis:
    image: redis:7-alpine
    command: redis-server --save 60 1 --loglevel notice
    privileged: true
    volumes:
      - redis-data:/data
    networks:
      - bot-network
    restart: on-failure

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    networks:
      - bot-network
    depends_on:
      - bot
    restart: on-failure

  grafana:
    image: grafana/grafana:10.4.3
    volumes:
      - ./grafana/datasources.yaml:/etc/grafana/provisioning/datasources/datasources.yaml
      - grafana-data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    ports:
      - "3000:3000"
    networks:
      - bot-network
    depends_on:
      - prometheus
    restart: on-failure

  node-exporter:
    image: prom/node-exporter:v1.3.1
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude'
      - '^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)'
    networks:
      - bot-network
    restart: on-failure

  nginx:
    image: nginx:latest
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/certs:/etc/nginx/certs:ro
    networks:
      - bot-network
    restart: on-failure

volumes:
  postgres-data:
  redis-data:
  prometheus-data:
  grafana-data:

networks:
  bot-network:
    driver: bridge